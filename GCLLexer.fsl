{
module GCLLexer

open System
open GCLParser
open Microsoft.FSharp.Text.Lexing
open System.Text

}

let char        = ['a'-'z' 'A'-'Z']
let digit       = ['0'-'9']
let name        = char(char|digit|'_')*
let num			= digit+
let newline     = ('\n' | '\r' '\n')
//let whitespace  = ['\u00A0' '\f' '\n' '\r' '\t' '\v' ' ']
//let whitespace  = [' ' '\t' '\n' '\r']
let whitespace  = [' ' '\t']
let if          = "if" whitespace
let fi			= whitespace "fi"
let do 			= "do" whitespace
let od 			= whitespace "od"

rule tokenize = parse
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| "[]"			{ OPTION }
| '&'			{ AND }
| "&&"			{ AND_SHORT }
| '|'			{ OR }
| "||"			{ OR_SHORT }
| '!'			{ NOT }
| '='			{ EQUALS }
| "!="			{ NOT_EQUALS }
| '<'			{ LESS_THAN }
| '>'			{ GREATER_THAN }
| "<="			{ LESS_OR_EQUALS }
| ">="			{ GREATER_OR_EQUALS }
| ";"			{ SEMICOLON }
| if			{ IF }
| fi			{ END_IF }
| do			{ DO }
| od			{ END_DO }
| ":="			{ ASSIGN }
| "->"			{ ARROW }
| "skip"		{ SKIP }
| "true"		{ TRUE }
| "false"		{ FALSE }
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf }
| num			{ NUMBER(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| name			{ let str = LexBuffer<_>.LexemeString lexbuf in NAME(str) }
| eof           { EOF }