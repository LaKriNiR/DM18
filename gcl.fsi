// Signature file for parser generated by fsyacc
module GCLParser
type token = 
  | LESS_OR_EQUALS
  | GREATER_OR_EQUALS
  | DO
  | END_DO
  | ASSIGN
  | ARROW
  | EOF
  | EQUALS
  | NOT_EQUALS
  | LESS_THAN
  | GREATER_THAN
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | OPTION
  | AND
  | AND_SHORT
  | OR
  | OR_SHORT
  | NOT
  | SEMICOLON
  | IF
  | END_IF
  | SKIP of (Skip)
  | FALSE of (False)
  | TRUE of (True)
  | NUMBER of (int)
  | NAME of (string)
type tokenId = 
    | TOKEN_LESS_OR_EQUALS
    | TOKEN_GREATER_OR_EQUALS
    | TOKEN_DO
    | TOKEN_END_DO
    | TOKEN_ASSIGN
    | TOKEN_ARROW
    | TOKEN_EOF
    | TOKEN_EQUALS
    | TOKEN_NOT_EQUALS
    | TOKEN_LESS_THAN
    | TOKEN_GREATER_THAN
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_OPTION
    | TOKEN_AND
    | TOKEN_AND_SHORT
    | TOKEN_OR
    | TOKEN_OR_SHORT
    | TOKEN_NOT
    | TOKEN_SEMICOLON
    | TOKEN_IF
    | TOKEN_END_IF
    | TOKEN_SKIP
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_NUMBER
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_command
    | NONTERM_guardedcom
    | NONTERM_bool
    | NONTERM_arithm
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (C) 
